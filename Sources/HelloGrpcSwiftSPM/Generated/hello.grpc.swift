//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: hello.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Hello_GreeterClient`, then call methods of this protocol to make API calls.
internal protocol Hello_GreeterClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Hello_GreeterClientInterceptorFactoryProtocol? { get }

  func sayHello(
    _ request: Hello_HelloRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Hello_HelloRequest, Hello_HelloReply>
}

extension Hello_GreeterClientProtocol {
  internal var serviceName: String {
    return "hello.Greeter"
  }

  /// Unary call to SayHello
  ///
  /// - Parameters:
  ///   - request: Request to send to SayHello.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sayHello(
    _ request: Hello_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Hello_HelloRequest, Hello_HelloReply> {
    return self.makeUnaryCall(
      path: Hello_GreeterClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Hello_GreeterClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Hello_GreeterNIOClient")
internal final class Hello_GreeterClient: Hello_GreeterClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Hello_GreeterClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Hello_GreeterClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the hello.Greeter service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Hello_GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Hello_GreeterNIOClient: Hello_GreeterClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Hello_GreeterClientInterceptorFactoryProtocol?

  /// Creates a client for the hello.Greeter service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Hello_GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Hello_GreeterAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Hello_GreeterClientInterceptorFactoryProtocol? { get }

  func makeSayHelloCall(
    _ request: Hello_HelloRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Hello_HelloRequest, Hello_HelloReply>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Hello_GreeterAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Hello_GreeterClientMetadata.serviceDescriptor
  }

  internal var interceptors: Hello_GreeterClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSayHelloCall(
    _ request: Hello_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Hello_HelloRequest, Hello_HelloReply> {
    return self.makeAsyncUnaryCall(
      path: Hello_GreeterClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Hello_GreeterAsyncClientProtocol {
  internal func sayHello(
    _ request: Hello_HelloRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Hello_HelloReply {
    return try await self.performAsyncUnaryCall(
      path: Hello_GreeterClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Hello_GreeterAsyncClient: Hello_GreeterAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Hello_GreeterClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Hello_GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Hello_GreeterClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'sayHello'.
  func makeSayHelloInterceptors() -> [ClientInterceptor<Hello_HelloRequest, Hello_HelloReply>]
}

internal enum Hello_GreeterClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Greeter",
    fullName: "hello.Greeter",
    methods: [
      Hello_GreeterClientMetadata.Methods.sayHello,
    ]
  )

  internal enum Methods {
    internal static let sayHello = GRPCMethodDescriptor(
      name: "SayHello",
      path: "/hello.Greeter/SayHello",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Hello_GreeterProvider: CallHandlerProvider {
  var interceptors: Hello_GreeterServerInterceptorFactoryProtocol? { get }

  func sayHello(request: Hello_HelloRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Hello_HelloReply>
}

extension Hello_GreeterProvider {
  internal var serviceName: Substring {
    return Hello_GreeterServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SayHello":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Hello_HelloRequest>(),
        responseSerializer: ProtobufSerializer<Hello_HelloReply>(),
        interceptors: self.interceptors?.makeSayHelloInterceptors() ?? [],
        userFunction: self.sayHello(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Hello_GreeterAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Hello_GreeterServerInterceptorFactoryProtocol? { get }

  func sayHello(
    request: Hello_HelloRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Hello_HelloReply
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Hello_GreeterAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Hello_GreeterServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Hello_GreeterServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Hello_GreeterServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SayHello":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Hello_HelloRequest>(),
        responseSerializer: ProtobufSerializer<Hello_HelloReply>(),
        interceptors: self.interceptors?.makeSayHelloInterceptors() ?? [],
        wrapping: { try await self.sayHello(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Hello_GreeterServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'sayHello'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSayHelloInterceptors() -> [ServerInterceptor<Hello_HelloRequest, Hello_HelloReply>]
}

internal enum Hello_GreeterServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Greeter",
    fullName: "hello.Greeter",
    methods: [
      Hello_GreeterServerMetadata.Methods.sayHello,
    ]
  )

  internal enum Methods {
    internal static let sayHello = GRPCMethodDescriptor(
      name: "SayHello",
      path: "/hello.Greeter/SayHello",
      type: GRPCCallType.unary
    )
  }
}
